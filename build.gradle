buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
}

allprojects {
    group = 'org.strangeway'
    version = '0.1'

    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'application'

node {
    version = '10.15.3'
    download = true
    nodeModulesDir = project.file('electron-src')
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.2'

    compile 'org.eclipse.jetty:jetty-server:9.3.20.v20170531'
    compile 'org.eclipse.jetty:jetty-webapp:9.3.20.v20170531'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.3.20.v20170531'

    compile 'com.vaadin:vaadin-server:8.1.6'
    compile 'com.vaadin:vaadin-push:8.1.6'
    compile 'com.vaadin:vaadin-client-compiled:8.1.6'
    compile 'com.vaadin:vaadin-themes:8.1.6'

    compile 'commons-io:commons-io:2.5'
}

applicationName = 'electron-vaadin'
mainClassName = 'org.strangeway.electronvaadin.Launcher'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations.archives.artifacts.removeAll {
    it.file =~ 'tar'
}

// Prepare files for serving from file system using vaadin:// protocol
task flatten(group: 'build', dependsOn: installDist) {
    outputs.dir(project.file('build/install/electron-vaadin/VAADIN'))

    doLast {
        def compileFiles = project.configurations.getByName('compile').resolve()
        for (f in compileFiles) {
            copy {
                includeEmptyDirs = false
                from(zipTree(f))
                into(project.file('build/install/electron-vaadin'))
                include 'VAADIN/**'
                exclude 'VAADIN/widgetsets/WEB-INF/**'
                exclude 'VAADIN/themes/chameleon/**'
                exclude 'VAADIN/themes/liferay/**'
                exclude 'VAADIN/themes/reindeer/**'
                exclude 'VAADIN/themes/runo/**'
                exclude 'VAADIN/themes/valo/fonts/lato/**'
                exclude 'VAADIN/themes/valo/fonts/lora/**'
                exclude 'VAADIN/themes/valo/fonts/roboto/**'
                exclude 'VAADIN/themes/valo/fonts/source-sans-pro/**'
                exclude 'VAADIN/**/*.gz'
                exclude 'VAADIN/**/*.scss'
                exclude 'VAADIN/**/readme.txt'
            }
        }
    }
}

task buildApp(group: 'build', dependsOn: [flatten, npm_install]) {
    doLast {
        def targetDir = project.file('electron-src/electron-vaadin')

        project.file('electron-src/electron-vaadin/').deleteDir()
        copy {
            from project.file('build/install/electron-vaadin/')
            into targetDir
        }

        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def appFile = new File(targetDir, 'bin/electron-vaadin')
        if (!isWindows) {
            exec {
                commandLine 'chmod', '+x', appFile.absolutePath
            }
        }
    }
}

task runApp(group: 'debug', dependsOn: buildApp) {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
        def nodeDir = isWindows ? localNodeInstallDir : new File(localNodeInstallDir, 'bin')

        exec {
            workingDir 'electron-src'
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (isWindows) {
                commandLine 'cmd', '/c', '"./node_modules/.bin/electron" .'
            } else {
                commandLine './node_modules/.bin/electron', '.'
            }
        }
    }
}

task bundleApp(group: 'build', dependsOn: buildApp) {
    outputs.dir(project.file('build/bundle'))

    doLast {
        def osName = System.getProperty('os.name').toLowerCase()

        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
        def nodeDir = isWindows ? localNodeInstallDir : new File(localNodeInstallDir, 'bin')

        def targetDir = project.file('build/bundle')
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
        targetDir.mkdirs()

        exec {
            workingDir 'electron-src'
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (isWindows) {
                commandLine 'cmd', '/c', '"./node_modules/.bin/electron-packager" . ' +
                        '--out=../build/bundle/ ' +
                        '--icon=icon.ico ' +
                        '--ignore=README.md ' +
                        '--ignore=.npmignore ' +
                        '--ignore=.travis.yml" .'
            } else {
                commandLine './node_modules/.bin/electron-packager', '.',
                        '--icon=icon.icns',
                        '--out=../build/bundle/',
                        '--ignore=README.md',
                        '--ignore=.npmignore',
                        '--ignore=.travis.yml'
            }
        }
    }
}

build.dependsOn buildApp
